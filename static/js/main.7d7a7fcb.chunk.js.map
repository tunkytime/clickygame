{"version":3,"sources":["components/CharacterCard/index.js","components/Navbar/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","src","image","alt","name","id","onClick","handleClick","Navbar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","score","highScore","Container","children","clickedArr","App","state","characters","clicked","forEach","character","includes","_this","setState","updateHighScore","push","shuffleCharacters","sort","Math","random","l","text","char_list","i","charAt","floor","length","_this2","this","Fragment","components_Navbar","components_Container","map","key","makeid","components_CharacterCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d7a7fcb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <div className=\"card mt-3 mb-3 text-center\">\r\n      <div className=\"img-container\">\r\n        <img src={props.image} alt={props.name} />\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{props.name}</h5>\r\n        <p className=\"card-text\" />\r\n        <button\r\n          id={props.id}\r\n          className=\"btn btn-primary btn-lg\"\r\n          onClick={() => props.handleClick(props.id)}\r\n        >\r\n          Click\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar fixed-top navbar-expand-lg navbar-dark bg-dark\">\r\n      <span className=\"navbar-brand\" href=\"#\">\r\n        Clicky Game\r\n      </span>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav ml-auto text-white\">\r\n          <li className=\"mr-2\">\r\n            <span>Current Streak: {props.score}</span>\r\n          </li>\r\n          <li className=\"mr-2\">\r\n            <span>High Score: {props.highScore}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container-fluid mt-5 p-3\">{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Navbar from \"./components/Navbar\";\nimport Container from \"./components/Container\";\nimport characters from \"./characters.json\";\nimport \"./style.css\";\n\nlet clickedArr = [];\n\nclass App extends Component {\n  state = {\n    characters,\n    clicked: [],\n    score: 0,\n    highScore: 0\n  };\n\n  makeid(l) {\n    let text = \"\";\n    let char_list =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let i = 0; i < l; i++) {\n      text += char_list.charAt(Math.floor(Math.random() * char_list.length));\n    }\n    return text;\n  }\n\n  handleClick = id => {\n    characters.forEach(character => {\n      if (character.id === id) {\n        if (clickedArr.includes(id)) {\n          clickedArr = [];\n          this.setState({ clicked: [], score: 0 });\n          this.updateHighScore();\n        } else {\n          clickedArr.push(id);\n          this.setState({\n            clicked: clickedArr,\n            score: this.state.score + 1\n          });\n        }\n      }\n    });\n    this.shuffleCharacters(id);\n  };\n\n  shuffleCharacters = () => {\n    this.state.characters.sort(() => Math.random() - 0.5);\n    this.setState({ characters });\n  };\n\n  updateHighScore = () => {\n    if (this.state.score > this.state.highScore) {\n      this.setState({ highScore: this.state.score });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar score={this.state.score} highScore={this.state.highScore} />\n        <Container>\n          {\" \"}\n          <div className=\"row\">\n            {this.state.characters.map(character => (\n              <div className=\"col-sm-3\" key={this.makeid(9)}>\n                <CharacterCard\n                  handleClick={this.handleClick}\n                  id={character.id}\n                  key={character.id}\n                  name={character.name}\n                  image={character.image}\n                />\n              </div>\n            ))}\n          </div>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}